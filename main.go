package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/ClickHouse/clickhouse-go/v2"
	"github.com/alecthomas/kong"
	"github.com/mikluko/clickhousegen/internal"
)

type cli struct {
	Host     string `          default:"localhost" env:"CLICKHOUSEGEN_HOST"     help:"Host"`
	Port     uint16 `          default:"9000"      env:"CLICKHOUSEGEN_PORT"     help:"Port"`
	Database string `          default:"default"   env:"CLICKHOUSEGEN_DATABASE" help:"Database" `
	Username string `          default:"default"   env:"CLICKHOUSEGEN_USERNAME" help:"User"`
	Password string `          default:""          env:"CLICKHOUSEGEN_PASSWORD" help:"Password"`
	Out      string `short:"o" default:""                                       help:"Output file, stdout if empty"`
	Debug    bool   `short:"d"                                                  help:"Enable debug logging"`
	Package  string `short:"p" default:"models"                                 help:"Package name"`
	Struct   string `short:"s"                                                  help:"Struct name, generated by default (table_name -> TableName)"`

	Table string `arg:"" name:"table" help:"Table to introspect"`
}

func (c *cli) Run(_ *kong.Context) error {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	conn, err := c.connect(ctx)
	if err != nil {
		return err
	}
	defer conn.Close()

	table, err := internal.Introspect(ctx, conn, c.Database, c.Table)
	if err != nil {
		return err
	}
	strct, err := table.ToStruct()
	if err != nil {
		return err
	}
	err = internal.Render(c.Package, c.Struct, strct, os.Stdout)
	if err != nil {
		return err
	}

	return nil
}

func (c *cli) connect(ctx context.Context) (clickhouse.Conn, error) {
	conn, err := clickhouse.Open(&clickhouse.Options{
		Addr: []string{fmt.Sprintf("%s:%d", c.Host, c.Port)},
		Auth: clickhouse.Auth{
			Username: c.Username,
			Password: c.Password,
			Database: c.Database,
		},
		Debug: c.Debug,
	})
	if err != nil {
		return nil, err
	}
	err = conn.Ping(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

func main() {
	obj := cli{}
	ctx := kong.Parse(&obj)
	err := ctx.Run()
	if err != nil {
		log.Fatalln(err)
	}
}
